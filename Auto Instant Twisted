local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local cam = workspace.CurrentCamera

local animationId = "rbxassetid://13294471966"
local debounce = false
local systemEnabled = false  -- tr·∫°ng th√°i toggle

-- GUI Toggle
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "SwipeToggleGui"

local toggleButton = Instance.new("TextButton", screenGui)
toggleButton.Size = UDim2.new(0, 160, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0.85, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextScaled = true
toggleButton.Font = Enum.Font.GothamBold
toggleButton.Text = "Instant Twisted: OFF"
toggleButton.BorderSizePixel = 0
toggleButton.BackgroundTransparency = 0.1
toggleButton.AnchorPoint = Vector2.new(0, 0)
toggleButton.Active = true
toggleButton.Draggable = true

toggleButton.MouseButton1Click:Connect(function()
	systemEnabled = not systemEnabled
	if systemEnabled then
		toggleButton.Text = "Instant Twisted: ON"
		toggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
	else
		toggleButton.Text = "Instant Twisted: OFF"
		toggleButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	end
end)

-- H√†m Swipe + Dash (kh√¥ng c√≤n l√πi ·ªü ƒë√¢y n·ªØa)
local function swipeAndDash()
	print("‚úÖ Swipe + Dash Triggered")

	-- G·ª≠i Remote Dash
	local args = {
		[1] = {
			["Dash"] = Enum.KeyCode.W,
			["Key"] = Enum.KeyCode.Q,
			["Goal"] = "KeyPress"
		}
	}
	local char = player.Character
	if char and char:FindFirstChild("Communicate") then
		char.Communicate:FireServer(unpack(args))
	end

	-- Swipe tr√°i
	local startCFrame = cam.CFrame
	local leftCFrame = startCFrame * CFrame.Angles(40, math.rad(-90), 180)

	cam.CameraType = Enum.CameraType.Scriptable
	local tween1 = TweenService:Create(cam, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = leftCFrame})
	tween1:Play()
	tween1.Completed:Wait()

	-- Quay l·∫°i
	wait(0.00001)
	local tween2 = TweenService:Create(cam, TweenInfo.new(0.001, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = startCFrame})
	tween2:Play()
	tween2.Completed:Wait()

	-- Xoay ph·∫£i ch√©o
	wait(0.1)
	local angledCFrame = startCFrame * CFrame.Angles(math.rad(-6), math.rad(20), 0)
	local tween3 = TweenService:Create(cam, TweenInfo.new(0.0001, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = angledCFrame})
	tween3:Play()
	tween3.Completed:Wait()

	cam.CameraType = Enum.CameraType.Custom
end

-- Theo d√µi animation
local function setupMonitor()
	local function onAnimPlayed(track)
		if not systemEnabled then return end
		if track.Animation and track.Animation.AnimationId == animationId then
			if debounce then return end
			debounce = true
			print("üé¨ Ph√°t hi·ªán animation:", animationId)

			-- üëâ L√πi l·∫°i 1 b∆∞·ªõc NGAY KHI animation ph√°t hi·ªán
			local char = player.Character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			if hrp then
				local back = hrp.CFrame.LookVector * -1
				hrp.CFrame = hrp.CFrame + back
			end

			-- üëâ Sau 0.2s th√¨ m·ªõi swipe + dash
			task.delay(0.25, function()
				swipeAndDash()
				wait(5) -- ‚è± Cooldown 5 gi√¢y
				debounce = false
			end)
		end
	end

	local function bindAnimator(animator)
		animator.AnimationPlayed:Connect(onAnimPlayed)
	end

	local char = player.Character or player.CharacterAdded:Wait()
	local humanoid = char:WaitForChild("Humanoid")
	local animator = humanoid:FindFirstChildOfClass("Animator")

	if animator then
		bindAnimator(animator)
	else
		humanoid.ChildAdded:Connect(function(child)
			if child:IsA("Animator") then
				bindAnimator(child)
			end
		end)
	end
end

-- T·ª± ƒë·ªông theo d√µi khi nh√¢n v·∫≠t spawn
if player.Character then
	setupMonitor()
end

player.CharacterAdded:Connect(setupMonitor)
